"""user and recipe table

Revision ID: d1c2b0c1d4c5
Revises: 
Create Date: 2021-07-27 04:42:30.517342

"""
from faker import Factory
from alembic import op
from random import randint as rand, choice as randlist
from sqlalchemy.sql import table, column
from app.controllers.AuthController import Auth
import sqlalchemy as sa
import string
import random
import datetime


# revision identifiers, used by Alembic.
revision = 'd1c2b0c1d4c5'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('fullname', sa.String(length=255), nullable=False),
        sa.Column('username', sa.String(length=255), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('password', sa.String(length=255), nullable=False),
        sa.Column('salt', sa.String(length=255), nullable=False),
        sa.Column('role', sa.Enum('admin', 'user'), nullable=False),
        sa.Column('token', sa.String(length=32), nullable=False),
        sa.Column('active', sa.Enum('Y', 'N'), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('username')
    )
    op.create_table('recipe',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('id_user', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=False),
        sa.Column('country', sa.String(length=50), nullable=False),
        sa.Column('category', sa.String(length=255), nullable=False),
        sa.Column('image', sa.Text(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.Column('deleted_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['id_user'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    faker = Factory.create('id_ID')
    user = table('user',
        column('fullname', sa.String(length=255)),
        column('username', sa.String(length=255)),
        column('email', sa.String(length=255)),
        column('password', sa.String(length=255)),
        column('salt', sa.String(length=255)),
        column('role', sa.Enum('admin', 'user', name='role')),
        column('token', sa.String(length=32)),
        column('active', sa.Enum('Y', 'N', name='active')),
        column('created_at', sa.DateTime()),
        column('updated_at', sa.DateTime()),
    )
    auth = Auth()
    u = []
    for i in range(99):
        profile = faker.simple_profile()
        passw = auth.encrypt(faker.word())
        u.append({
            'fullname': profile['name'],
            'username': profile['username'],
            'email': profile['mail'],
            'password': passw[0],
            'salt': passw[1],
            'role': 'admin' if i % 10 == 0 else 'user',
            'token': ''.join(random.sample(string.ascii_letters, 32)),
            'active': 'Y',
            'created_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S'),
            'updated_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S')
        })
    passw = auth.encrypt('admin')
    u.append({
        'fullname': 'Administrator',
        'username': 'admin',
        'email': 'admin@admin.com',
        'password': passw[0],
        'salt': passw[1],
        'role': 'admin',
        'token': ''.join(random.sample(string.ascii_letters, 32)),
        'active': 'Y',
        'created_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S'),
        'updated_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S')
    })
    op.bulk_insert(user, u)
    
    recipe = table('recipe',
        column('id_user', sa.Integer()),
        column('name', sa.String(length=255)),
        column('description', sa.Text()),
        column('country', sa.String(length=50)),
        column('category', sa.String(length=255)),
        column('image', sa.Text()),
        column('created_at', sa.DateTime()),
        column('updated_at', sa.DateTime())
    )
    foodNames = ['Gado-Gado', 'Nasi Goreng', 'Mie Goreng', 'Mie Rebus', 'Kwetiau Goreng', 'Kwetiau Rebus',
                 'Nasi Uduk', 'Ayam Goreng', 'Ayam Bakar', 'Sate Ayam', 'Sate Kambing', 'Rujak',
                 'Soto Ayam', 'Soto Betawi', 'Sop Ayam', 'Sop Ikan', 'Rendang', 'Siomay', 'Batagor',
                 'Sayur Lodeh', 'Sayur Asam', 'Sayur Bening', 'Pasta', 'Ketoprak', 'Ikan Bakar',
                 'Nasi Uduk', 'Nasi Kuning', 'Sayur Lodeh', 'Gulai', 'Sop Buntut', 'Seblak', 'Sate Lilit',
                 'Serabi', 'Kroket', 'Semur', 'Laksa', 'Ayam Geprek', 'Ayam Tangkap', 'Pisang Molen',
                 'Otak-Otak', 'Onde-Onde', 'Cireng', 'Gehu', 'Mie Kocok', 'Nasi Timbel', 'Klontong',
                 'Tahu Bulat', 'Pepes Ikan', 'Tahu Sumedang', 'Kupat Tahu', 'Tahu Bulat', 'Soto Kuning',
                 'Getuk', 'Klepon', 'Nasi Pecel', 'Opor Ayam', 'Wajik', 'Urap']
    r = []
    for foodName in foodNames:
        r.append({
            'id_user': rand(1, 100),
            'name': foodName,
            'description': faker.paragraph(nb_sentences=50),
            'country': 'Indonesia',
            'category': faker.word(),
            'image': foodName.lower().replace(' ', '-') + '.' + randlist(['png', 'jpg', 'jpeg']),
            'created_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S'),
            'updated_at': datetime.datetime.now().strftime('%Y:%m:%d %H:%M:%S')
        })
    op.bulk_insert(recipe, r)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('recipe')
    op.drop_table('user')
    # ### end Alembic commands ###
